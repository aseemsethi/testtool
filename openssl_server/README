Generation of Keys for openssl_s:
(ref: akadia.com/services/ssh_test_certificate.html)
Generate 1024 bit Private Key, which is encrypted using triple DES
$ openssl genrsa -des3 -out server.key 1024
Generate a CSR - enter various details like Org Name, etc.
$ openssl req -new -key server.key -out server.csr
Remove passphrase from Key - removed triple des encrption from key. This
ensures that if the server.cert/server.key pair is used in Apache, it 
will not ask for password whenever web server is started.
$ cp server.key server.key.org
$ openssl rsa -in server.key.org -out server.key
Generate a Sel-Signed Certificate
$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
At the End of the above excercise the pair server.crt and server.key are used
in any SSL Server like Apache Server.

Testing the SSL Client program:
$ openssl s_server -key server.key -cert server.crt -debug -state -msg
The Keys are generated as explained above:
1) server.key	- private key
1) server.cert	-  Self Signed Certificate
1) Flags	- -debug -state -msg 

To check the modulus of the key you generated, given the following commnad:
$ openssl rsa -in www.key -noout -modulus
When you run the client program, you will find that this is being printed in the verifyCertificate() function.

To view certficate contents
$ openssl x509 -in webserver.crt -text -noout
